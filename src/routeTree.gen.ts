/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as MarkdownDemoRouteImport } from './routes/markdown-demo'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutTagsRouteImport } from './routes/_layout/tags'
import { Route as LayoutAboutRouteImport } from './routes/_layout/about'
import { Route as LayoutBlogIndexRouteImport } from './routes/_layout/blog.index'
import { Route as LayoutBlogBlogIdRouteImport } from './routes/_layout/blog.$blogId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const MarkdownDemoRoute = MarkdownDemoRouteImport.update({
  id: '/markdown-demo',
  path: '/markdown-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTagsRoute = LayoutTagsRouteImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutAboutRoute = LayoutAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutBlogIndexRoute = LayoutBlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutBlogBlogIdRoute = LayoutBlogBlogIdRouteImport.update({
  id: '/blog/$blogId',
  path: '/blog/$blogId',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/markdown-demo': typeof MarkdownDemoRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/about': typeof LayoutAboutRoute
  '/tags': typeof LayoutTagsRoute
  '/': typeof LayoutIndexRoute
  '/blog/$blogId': typeof LayoutBlogBlogIdRoute
  '/blog': typeof LayoutBlogIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/markdown-demo': typeof MarkdownDemoRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/about': typeof LayoutAboutRoute
  '/tags': typeof LayoutTagsRoute
  '/': typeof LayoutIndexRoute
  '/blog/$blogId': typeof LayoutBlogBlogIdRoute
  '/blog': typeof LayoutBlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/markdown-demo': typeof MarkdownDemoRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/_layout/about': typeof LayoutAboutRoute
  '/_layout/tags': typeof LayoutTagsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/blog/$blogId': typeof LayoutBlogBlogIdRoute
  '/_layout/blog/': typeof LayoutBlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/markdown-demo'
    | '/register'
    | '/search'
    | '/about'
    | '/tags'
    | '/'
    | '/blog/$blogId'
    | '/blog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/markdown-demo'
    | '/register'
    | '/search'
    | '/about'
    | '/tags'
    | '/'
    | '/blog/$blogId'
    | '/blog'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/markdown-demo'
    | '/register'
    | '/search'
    | '/_layout/about'
    | '/_layout/tags'
    | '/_layout/'
    | '/_layout/blog/$blogId'
    | '/_layout/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  MarkdownDemoRoute: typeof MarkdownDemoRoute
  RegisterRoute: typeof RegisterRoute
  SearchRoute: typeof SearchRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/markdown-demo': {
      id: '/markdown-demo'
      path: '/markdown-demo'
      fullPath: '/markdown-demo'
      preLoaderRoute: typeof MarkdownDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/tags': {
      id: '/_layout/tags'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof LayoutTagsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/about': {
      id: '/_layout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutAboutRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/blog/': {
      id: '/_layout/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LayoutBlogIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/blog/$blogId': {
      id: '/_layout/blog/$blogId'
      path: '/blog/$blogId'
      fullPath: '/blog/$blogId'
      preLoaderRoute: typeof LayoutBlogBlogIdRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutAboutRoute: typeof LayoutAboutRoute
  LayoutTagsRoute: typeof LayoutTagsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutBlogBlogIdRoute: typeof LayoutBlogBlogIdRoute
  LayoutBlogIndexRoute: typeof LayoutBlogIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAboutRoute: LayoutAboutRoute,
  LayoutTagsRoute: LayoutTagsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutBlogBlogIdRoute: LayoutBlogBlogIdRoute,
  LayoutBlogIndexRoute: LayoutBlogIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  MarkdownDemoRoute: MarkdownDemoRoute,
  RegisterRoute: RegisterRoute,
  SearchRoute: SearchRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
